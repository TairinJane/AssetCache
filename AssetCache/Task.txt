﻿Реализовать интерфейс с учетом большого размера файлов (не забываем про BOM-ы и кодировки), функция interruptChecker не делает ничего (пустая лямбда)

Некая инфраструктура запускает метод Build и синхронно дожидается его выполнения, только после этого она зовет метод Merge. Метод Build может исполняться потенциально долго, поэтому 2-ым аргументом ему передается interruptChecker, который теперь бросает OperationCanceledException в случае, если операцию Build необходимо отменить (например, файл на диске хотят поменять, и т. д.). Инфраструктура ловит брошенные OperationCanceledException из метода Build и спустя некоторое время снова вызывает метод Build для данного файла. В методе Build необходимо расставить проверки на прерывание. Следует учесть, что между прерываниями файл на диске мог измениться (timestamp файла - хороший индикатор, делать слишком частые проверки на прерываемость плохо)

* Строить кэш для одного и того же файла после каждого прерывания не продуктивно, реализуйте инкрементальность (следующий вызов Build должен пропускать обработанную информацию, если файл не изменился, и обрабатывать новые данные)

* Доп. задание, которое будет хорошим плюсом

Комментарии:
Готовый парсер для ямла можно взять здесь - https://github.com/aaubry/YamlDotNet, писать свой долго :)

В течение Build-а файл на диске не может измениться, между прерываниями - может

Не все данные одинаково полезны, некоторые части можно не парсить вовсе и пропустить (или использовать лексер/регулярки/поиск по строке)

Решение нужно приложить ссылкой на файл (гугл драйв, не забудьте проверить доступ!) или ссылкой на гитхаб. Пожалуйста, не вставляйте в поле ответа код.